#!/usr/bin/env bash

echo -e "fill process name: \c"
read process
echo -e "need source? y/n(default n) \c"
read is_source
if [ ! $is_source ];then
    is_source=n
fi
echo -e "need sync? y/n(default n) \c"
read is_sync
if [ ! $is_sync ];then
    is_sync=n
fi
if [[ $is_sync == "y"  ]];then
    echo -e "fill synchronize file names: \c"
    read sync_files
    echo -e "fill synchronize path: \c"
    read sync_path
fi
echo -e "continue? y/n(default y) \c"
read is_start
if [[ $is_start == "n"  ]];then
    exit
fi
mkdir $process
cd $process
touch install.sh
echo "#!/usr/bin/env bash" >> install.sh
echo "#auto generated by epack" >> install.sh
echo "source configure.sh" >> install.sh
touch configure.sh
echo "#!/usr/bin/env bash" >> configure.sh
echo "#auto generated by epack" >> configure.sh
if [[ $is_source == "y"  ]];then
    echo source
fi
if [[ $is_sync == "y"  ]];then
    touch load.sh
    echo "#!/usr/bin/env bash" >> load.sh
    echo "#auto generated by epack" >> load.sh
    echo "TO_DIR=$sync_path" >> load.sh
    echo "for file in $sync_files;do" >> load.sh
    echo -e "\tif [ -e \$TO_DIR/\$file ];then" >> load.sh
    echo -e "\t\techo backup \$TO_DIR/\$file to \$TO_DIR/\$file.old" >> load.sh
    echo -e "\t\tsudo mv \$TO_DIR/\$file \$TO_DIR/\$file.old" >> load.sh
    echo -e "\tfi" >> load.sh
    echo -e "\tsudo cp \$file \$TO_DIR/\$file" >> load.sh
    echo -e "\tsudo chmod 664 \$TO_DIR/\$file" >> load.sh
    echo -e "\techo load \$file success" >> load.sh
    echo "done" >> load.sh
    #source load.sh
    touch save.sh
    echo "#!/usr/bin/env bash" >> save.sh
    echo "#auto generated by epack" >> save.sh
    echo "FROM_DIR=$sync_path" >> save.sh
    echo "for file in $sync_files;do" >> save.sh
    echo -e "\tif [ -e \$FROM_DIR/\$file ];then" >> save.sh
    echo -e "\t\tcp \$FROM_DIR/\$file \$file" >> save.sh
    echo -e "\t\techo save \$file success" >> save.sh
    echo -e "\telse" >> save.sh
    echo -e "\t\techo \$FROM_DIR\$json not exist" >> save.sh
    echo -e "\tfi" >> save.sh
    echo "done" >> save.sh
fi

